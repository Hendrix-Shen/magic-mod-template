apply(plugin: "maven-publish")
apply(plugin: "fabric-loom")
apply(plugin: "io.github.juuxel.loom-quiltflower")
apply(plugin: "com.replaymod.preprocess")

int mcVersion = 1

preprocess {
    mcVersion = vars.get()["MC"]
    tabIndentation = false
}

repositories {
    maven {
        url 'https://www.cursemaven.com/'
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url 'https://maven.hendrixshen.top'
    }
    mavenCentral()
    mavenLocal()
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.officialMojangMappings())
    modImplementation("top.hendrixshen:magiclib-${project.name.replace(".", "_")}:${project.magiclib_version}")

    runtimeOnly(project(path: ":fabricWrapper"))
}

loom {
//    mixin {
//        // 如果使用 Legacy Mixin Ap，有时候 Mixin class remap 会有问题，该 remap 的不 remap
//        useLegacyMixinAp = false
//    }
    runConfigs.all {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        // ideConfigGenerated = true
        property("mixin.debug.export", "true")
        runDir "../../run"
    }
}

remapJar {
    remapperIsolation = true
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name + "-" + project.minecraft_version
version = project.parent.version
group = project.maven_group

processResources {
    // disable cache
    outputs.upToDateWhen { false }

    inputs.property("version", version)
    filesMatching("fabric.mod.json") {
        expand(["mod_version"         : project.version,
                "mod_id"              : project.mod_id,
                "mod_name"            : project.mod_name,
                "mod_homepage"        : project.mod_homepage,
                "mod_sources"         : project.mod_sources,
                "mod_license"         : project.mod_license,
                "minecraft_dependency": project.minecraft_dependency,
                "minecraft_version_id": project.name.replace(".", "_"),
                "minecraft_version"   : project.minecraft_version
        ])
    }
    filesMatching("assets/${project.mod_id}/lang/*.json") {
        expand([
                "mod_id"  : project.mod_id,
                "mod_name": project.mod_name,
        ])
    }
}
// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("../../LICENSE")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${project.mod_id}-${project.name.replace(".", "_")}"
            version = "${project.version}"
            from(components.java)
        }
    }

    repositories {
        mavenLocal()
        maven {
            url("$rootDir/publish")
        }
    }
}
